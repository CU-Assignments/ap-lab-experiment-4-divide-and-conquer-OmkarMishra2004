#include <vector>
#include <set>
#include <algorithm>

using namespace std;

class Solution {
public:
    vector<vector<int>> getSkyline(vector<vector<int>>& buildings) {
        vector<pair<int, int>> events; // Stores {x, height} events

        // Step 1: Convert buildings into events
        for (auto& b : buildings) {
            events.emplace_back(b[0], -b[2]); // Start of a building (negative height)
            events.emplace_back(b[1], b[2]);  // End of a building (positive height)
        }

        // Step 2: Sort events
        sort(events.begin(), events.end(), [](const pair<int, int>& a, const pair<int, int>& b) {
            if (a.first != b.first) return a.first < b.first;  // Sort by x-coordinates
            return a.second < b.second;  // Sort by height: start (-h) before end (+h)
        });

        // Step 3: Process events using a max-heap (multiset)
        multiset<int> activeHeights = {0};  // Initial ground height
        vector<vector<int>> result;
        int prevMaxHeight = 0;

        for (auto& [x, h] : events) {
            if (h < 0) {
                activeHeights.insert(-h);  // Add building height (start event)
            } else {
                activeHeights.erase(activeHeights.find(h));  // Remove height (end event)
            }

            int currMaxHeight = *activeHeights.rbegin();  // Get current tallest building
            if (currMaxHeight != prevMaxHeight) {  
                result.push_back({x, currMaxHeight});  // Add key point
                prevMaxHeight = currMaxHeight;
            }
        }

        return result;
    }
};
